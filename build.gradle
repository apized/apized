plugins {
  id 'net.researchgate.release' version '2.8.1'
  id 'com.github.breadmoirai.github-release' version '2.2.12'
  id "io.spring.dependency-management" version "${springDependencyGradlePluginVersion}"
  id 'com.bmuschko.docker-remote-api' version '9.4.0' apply false
  id 'jacoco-report-aggregation'
  id 'java'
}

ext {
  includedCoverage = [ '**/org/apized/**' ]
  excludedCoverage = [
    '**/org/apized/micronaut/processor/**',
    '**/org/apized/spring/processor/**',
    '**/*Builder.class',
    '**/*BuilderImpl.class',
  ]
}

allprojects {
  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      name = 'apized'
      url = 'https://maven.pkg.github.com/apized/apized'
    }
  }
}

subprojects {
  apply plugin: 'groovy'
  apply plugin: 'java-library'

  java {
    sourceCompatibility = JavaVersion.toVersion("21")
    targetCompatibility = JavaVersion.toVersion("21")
    withSourcesJar()
  }

  if (![ 'micronaut-gradle-plugin', 'spring-gradle-plugin', 'code-coverage-report' ].contains(it.name)) {
    apply plugin: 'maven-publish'

    publishing {
      repositories {
        maven {
          name = "GitHubPackages"
          url = uri("https://maven.pkg.github.com/apized/apized")
          credentials {
            username = System.getenv("GITHUB_ACTOR")
            password = System.getenv("GITHUB_TOKEN")
          }

        }
      }
      publications {
        maven(MavenPublication) {
          from components.java
        }
      }
    }
  }

  apply plugin: 'jacoco'

  jacocoTestReport {
    dependsOn test
    reports {
      html.required.set(true)
      xml.required.set(true)
    }

    afterEvaluate {
      classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(
          dir: it,
          includes: includedCoverage,
          exclude: excludedCoverage
        )
      }))
    }
  }

  jacocoTestCoverageVerification {
    dependsOn test
    violationRules {
      rule {
        classDirectories.setFrom(files(classDirectories.files.collect {
          fileTree(
            dir: it,
            includes: includedCoverage,
            exclude: excludedCoverage
          )
        }))

        limit {
          minimum = 0.5
        }
      }
    }
  }

  test {
    finalizedBy jacocoTestReport // report is always generated after tests run
  }
  jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
  }
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootGradlePluginVersion}"
  }
}

dependencies {
  jacocoAggregation project(':spring:spring-sample-server')
  jacocoAggregation project(':micronaut:micronaut-sample-server')
}

testCodeCoverageReport {
  classDirectories.setFrom(files(classDirectories.files.collect {
    fileTree(
      dir: it,
      includes: includedCoverage,
      exclude: excludedCoverage
    )
  }))
}

reporting {
  reports {
    testCodeCoverageReport(JacocoCoverageReport) {
      testType = TestSuiteType.UNIT_TEST
    }
  }
}

tasks.named('check') {
  dependsOn tasks.named('testCodeCoverageReport', JacocoReport)
}

release {
  preTagCommitMessage = '[skip ci] [Gradle Release Plugin] - pre tag commit: '
  git {
    requireBranch = /(main|release-.*)/
  }
}

githubRelease {
  owner = 'apized'
  token = "${System.getenv("GITHUB_TOKEN")}"
  targetCommitish = "main"
  tagName = "${project.version.replaceAll('-SNAPSHOT', '')}"
  releaseName = "${project.version.replaceAll('-SNAPSHOT', '')}"
  try {
    body = changelog().call()
  } catch (Exception ignored) {
    //Do nothing
  }
}

commitNewVersion.dependsOn tasks.githubRelease
tasks.githubRelease.mustRunAfter createReleaseTag
