#set ( $d = "$")
package org.apized.core.init;

import jakarta.inject.Inject;
import lombok.Generated;
import lombok.extern.slf4j.Slf4j;
import org.apized.core.ApizedConfig;
import org.apized.core.Dialect;
import org.apized.core.behaviour.BehaviourManager;
import org.apized.core.context.ApizedContext;
import org.apized.core.model.Action;
import org.apized.core.model.Layer;
import org.apized.core.model.When;
import org.apized.core.security.enricher.PermissionEnricherManager;
import org.apized.spring.context.SpringContextProvider;
import org.apized.spring.server.ApizedStartupEvent;
import org.apized.spring.server.ModelResolver;
import org.springframework.boot.context.event.ApplicationStartedEvent;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.context.event.EventListener;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

import java.util.List;

@Slf4j
@Generated
@Component
public class ApizedSpringInitializer {
  @Inject
  ApplicationContext applicationContext;

  @Inject
  ApplicationEventPublisher publisher;

  @Inject
  ApizedConfig config;

  @Inject
  BehaviourManager behaviourManager;

  @Inject
  PermissionEnricherManager enricherManager;

#foreach( $it in $behaviours )
  @Inject
  ${it.module}.${it.type} ${it.name};

#end
#foreach( $it in $enrichers )
  @Inject
  ${it.module}.${it.type} ${it.name};

#end
#macro( expandEnumList $enum $elements )
  #foreach( $value in $elements )${enum}.${value}#if( $foreach.hasNext ), #end#end
#end
  @EventListener
  @Order(-Integer.MAX_VALUE)
  void onStartup(ApplicationStartedEvent event) {
    log.info("Initializing apized");
    ApizedContext.provider = new SpringContextProvider();
    config.setDialect(Dialect.${dialect});
    ApizedConfig.setInstance(config);
    ModelResolver.applicationContext = applicationContext;

    #foreach( $it in $behaviours )
    behaviourManager.registerBehaviour(${it.annotation.module}.${it.annotation.model}.class, Layer.${it.annotation.layer}, List.of(#expandEnumList('When', ${it.annotation.when})), List.of(#expandEnumList('Action', ${it.annotation.actions})), ${it.annotation.order}, ${it.name});
    #end

    #foreach( $it in $enrichers )
    enricherManager.registerEnricher(${it.annotation.module}.${it.annotation.model}.class, ${it.name});
    #end

    publisher.publishEvent(new ApizedStartupEvent(config));
  }
}
