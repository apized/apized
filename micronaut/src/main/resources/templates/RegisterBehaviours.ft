package org.apized.apized.core.behaviour;

import org.apized.core.behaviour.BehaviourManager;
import org.apized.core.model.Action;
import org.apized.core.model.Layer;
import org.apized.core.model.Model;
import org.apized.core.model.When;
import io.micronaut.context.annotation.Requires;
import io.micronaut.runtime.event.annotation.EventListener;
import io.micronaut.runtime.server.event.ServerStartupEvent;
import jakarta.inject.Inject;
import jakarta.inject.Singleton;

import java.util.List;

@Singleton
@Requires(classes=BehaviourManager.class)
public class BehaviourRegistration {
  @Inject
  BehaviourManager manager;

#foreach( $it in $behaviours )
  @Inject
  ${it.module}.${it.type} ${it.name};

#end
#macro( expandEnumList $enum $elements )
  #foreach( $value in $elements )${enum}.${value}#if( $foreach.hasNext ), #end#end
#end
  @EventListener
  void onStartup(ServerStartupEvent event) {
    #foreach( $it in $behaviours )
    manager.registerBehaviour(${it.annotation.module}.${it.annotation.model}.class, Layer.${it.annotation.layer}, List.of(#expandEnumList('When', ${it.annotation.when})), List.of(#expandEnumList('Action', ${it.annotation.actions})), ${it.annotation.order}, ${it.name});
    #end
  }
}
