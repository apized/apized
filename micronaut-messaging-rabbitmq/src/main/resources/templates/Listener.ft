#set ( $d = "$")
package $module;

import com.rabbitmq.client.BasicProperties;
import com.rabbitmq.client.Envelope;
#if($metrics)
import io.micrometer.core.annotation.Timed;
#end
import io.micronaut.context.annotation.Requires;
import io.micronaut.context.env.Environment;
import io.micronaut.context.event.ApplicationEventPublisher;
import io.micronaut.core.type.Argument;
import io.micronaut.rabbitmq.annotation.Queue;
import io.micronaut.rabbitmq.annotation.RabbitListener;
import io.micronaut.rabbitmq.bind.RabbitAcknowledgement;
import io.micronaut.rabbitmq.connect.ChannelPool;
import io.micronaut.serde.ObjectMapper;
#if($traced)
import io.opentelemetry.api.trace.SpanKind;
#end
import jakarta.inject.Inject;
import jakarta.transaction.Transactional;
import lombok.Generated;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.apized.core.ApizedConfig;
import org.apized.core.error.ExceptionNotifier;
import org.apized.core.security.UserResolver;
import org.apized.micronaut.messaging.rabbitmq.consumer.EnvelopeConsumer;
import org.apized.micronaut.messaging.rabbitmq.consumer.QueueConfig;
#if($traced)
import org.apized.micronaut.tracing.Traced;
#end

import java.util.List;

@Generated
@Slf4j
@RabbitListener
@Requires(notEnv = Environment.TEST)
class ${type}${d}Listener extends EnvelopeConsumer<${generic}> {

  @Inject
  @Getter
  ${type} consumer;

  public ${type}${d}Listener(
    ChannelPool pool,
    ObjectMapper mapper,
    UserResolver resolver,
    ApizedConfig config,
    ApplicationEventPublisher<String> eventPublisher,
    List<ExceptionNotifier> notifiers
  ) {
    super(
      new QueueConfig("${exchange}", "${queue}", ${bindings}),
      pool,
      mapper,
      resolver,
      config,
      eventPublisher,
      notifiers
    );
  }

  @Override
  @Transactional
  @Queue("${queue}")
#if($metrics)
  @Timed(value = "rabbitmq.consumer", extraTags = {"consumer", "${type}"}, histogram = true)
#end
#if($traced)
  @Traced(kind = SpanKind.CONSUMER)
#end
  protected void consume(byte[] data, Envelope envelope, BasicProperties properties, RabbitAcknowledgement acknowledgement) {
    super.consume(data, envelope, properties, acknowledgement);
  }

  protected Argument<?> getType() {
    return Argument.of(${argument});
  }
}
