plugins {
  id 'groovy'
  id 'io.micronaut.application' version '3.5.3'
}

repositories {
  maven {
    url 'libs'
  }
  mavenLocal()
  mavenCentral()
}

configurations.all {
  resolutionStrategy.eachDependency { DependencyResolveDetails details ->
    if (details.requested.name == 'micronaut-inject') {
      details.useVersion '4.0.0-SNAPSHOT'
      details.because 'Properties annotated with JPA transient should not be excluded from introspections by default'
    }

    if (details.requested.group == 'io.micronaut.data') {
      details.useVersion '3.8.1-SNAPSHOT'
      details.because 'Properties annotated with JPA transient should not be excluded from introspections by default'
    }

    if (['micronaut-data-tx'].contains(details.requested.name)) {
      details.useVersion '3.4.3'
      details.because "Properties annotated with JPA transient should not be excluded from introspections by default"
    }
  }
}

dependencies {
  annotationProcessor('org.projectlombok:lombok')
  compileOnly('org.projectlombok:lombok')

  project.getDependencies().add("annotationProcessor", "io.micronaut:micronaut-http-validation");
  project.getDependencies().add("annotationProcessor", "io.micronaut.data:micronaut-data-processor");
  project.getDependencies().add("annotationProcessor", "io.micronaut.serde:micronaut-serde-processor");


  annotationProcessor(project(":micronaut-core"))
  implementation(project(":micronaut-core"))


  implementation('io.micronaut.data:micronaut-data-jdbc')
  runtimeOnly "org.postgresql:postgresql"
  runtimeOnly "io.micronaut.sql:micronaut-jdbc-hikari"

  testImplementation(project(':micronaut-test'))

//  ----------------------------
  annotationProcessor("io.micronaut.openapi:micronaut-openapi")

  runtimeOnly("io.micronaut.flyway:micronaut-flyway")
  runtimeOnly("ch.qos.logback:logback-classic")
}

application {
  mainClass.set("org.apized.micronaut.server.Application")
}

java {
  sourceCompatibility = JavaVersion.toVersion("17")
  targetCompatibility = JavaVersion.toVersion("17")
}

micronaut {
  runtime('netty')
  testRuntime('junit5')
}

graalvmNative {
  toolchainDetection = false
  binaries {
    main {
//      imageName.set($project.name)
      buildArgs.add('--verbose')
    }
  }
}

tasks.named("dockerfile") {
  args("-Xms64m -Xmx128m")
  instruction """HEALTHCHECK CMD curl -s localhost:8080/health | grep '"status":"UP"' """
}
